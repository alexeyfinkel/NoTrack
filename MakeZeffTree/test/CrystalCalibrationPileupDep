#include <stdio.h>
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <utility> //pairs live here
#include <TFile.h>
#include <TH1.h>
#include <TH2.h>
#include <math.h>
#include "TROOT.h"
#include "TCanvas.h"
#include "TStyle.h"
#include "TLegend.h"
#include "TColor.h"
#include "TProfile.h"
#include "TF1.h"

#include "../src/ZEffTree.h"

int crystalCalibCombined()
{
	gROOT->SetStyle("Plain");	
	gStyle->SetErrorX(0);
	gStyle->SetOptStat(0);
	
	TCanvas* c1 = new TCanvas("C1", "c1", 1200, 900);
	c1->cd();

	TLegend* l1 = new TLegend(0.65,0.7,0.9,0.9);
	l1->SetFillColor(10);
	
	//let's be fancy and use a map!
	std::map< pair<int,int>, TH1D* > histMapDataP, histMapDataN, ratioMapDataP, ratioMapDataN, histMapMCP, histMapMCN, ratioMapMCP, ratioMapMCN;
	char nameMDataP[128], nameMDataN[128], nameRDataN[128], nameRDataP[128], nameMCP[128], nameMCN[128], nameRmcN[128], nameRmcP[128];	
	
	for(int i=30;i<71;i++)
	{
		for(int j=30;j<71;j++)
		{
			//data
			if( (((i-50)*(i-50)+(j-50)*(j-50))  < 100) || (((i-50)*(i-50)+(j-50)*(j-50)) > 324) ) continue;
			sprintf(nameMDataP,"mZDatix%diy%dzP",i,j);
			sprintf(nameMDataN,"mZDatix%diy%dzN",i,j);
			sprintf(nameRDataP,"RatioDatIx%diy%dzP",i,j);
			sprintf(nameRDataN,"RatioDatIx%diy%dzN",i,j);
			histMapDataP[std::make_pair(i,j)]= new TH1D(nameMDataP,"",30,60,120);
			histMapDataN[std::make_pair(i,j)]= new TH1D(nameMDataN,"",30,60,120);
			ratioMapDataP[std::make_pair(i,j)]= new TH1D(nameRDataP,"",20,0.4,1.6);
			ratioMapDataN[std::make_pair(i,j)]= new TH1D(nameRDataN,"",20,0.4,1.6);
			//MC
			sprintf(nameMCP,"mZix%diy%dzP",i,j);
			sprintf(nameMCN,"mZix%diy%dzN",i,j);
			sprintf(nameRmcP,"RatioIx%diy%dzP",i,j);
			sprintf(nameRmcN,"RatioIx%diy%dzN",i,j);
			histMapMCP[std::make_pair(i,j)]= new TH1D(nameMCP,"",30,60,120);
			histMapMCN[std::make_pair(i,j)]= new TH1D(nameMCN,"",30,60,120);
			ratioMapMCP[std::make_pair(i,j)]= new TH1D(nameRmcP,"",20,0.4,1.6);
			ratioMapMCN[std::make_pair(i,j)]= new TH1D(nameRmcN,"",20,0.4,1.6);
			
		}
	}
		
	//getting real ambitious now: gonna do eta rings!
	std::vector<TH1D*> DataMCpeakByEtaP, DataMCpeakByEtaN, DataMCmeanByEtaP, DataMCmeanByEtaN, MCpeakByEtaP, MCpeakByEtaN, MCmeanByEtaP, MCmeanByEtaN;
	char name[128], title[256];// nameMC[128], titleMC[256];
	for(int i=0;i<7;i++)
	{
		//data
		sprintf(name,"peaksDatPEtaRing%d",i+1);
		sprintf(title,"Gauss-fit Peaks, Data, NT+, Eta Ring #%d;GF Peak;Events",i+1);
		DataMCpeakByEtaP.push_back( new TH1D(name,title,30,60,120) );
		sprintf(name,"peaksDatNEtaRing%d",i+1);
		sprintf(title,"Gauss-fit Peaks, Data NT-, Eta Ring #%d;GF Peak;Events",i+1);
		DataMCpeakByEtaN.push_back( new TH1D(name,title,30,60,120) );
		sprintf(name,"meansDatPEtaRing%d",i+1);
		sprintf(title,"Mean Ratios, Data, NT+, Eta Ring #%d;Mean Ratio;Events",i+1);
		DataMCmeanByEtaP.push_back( new TH1D(name,title,40,0,2) );
		sprintf(name,"meansDatNEtaRing%d",i+1);
		sprintf(title,"Mean Ratios, Data, NT-, Eta Ring #%d;Mean Ratio;Events",i+1);
		DataMCmeanByEtaN.push_back( new TH1D(name,title,40,0,2) );
		//MC	
		sprintf(name,"peaksEtaPRing%d",i+1);
		sprintf(title,"Gauss-fit Peaks, NT+, Eta Ring #%d;GF Peak;Events",i+1);
		MCpeakByEtaP.push_back( new TH1D(name,title,30,60,120) );
		sprintf(name,"peaksEtaNRing%d",i+1);
		sprintf(title,"Gauss-fit Peaks, NT-, Eta Ring #%d;GF Peak;Events",i+1);
		MCpeakByEtaN.push_back( new TH1D(name,title,30,60,120) );
		sprintf(name,"meansEtaPRing%d",i+1);
		sprintf(title,"Mean Ratios, NT+, Eta Ring #%d;Mean Ratio;Events",i+1);
		MCmeanByEtaP.push_back( new TH1D(name,title,40,0,2) );
		sprintf(name,"meansEtaNRing%d",i+1);
		sprintf(title,"Mean Ratios, NT-, Eta Ring #%d;Mean Ratio;Events",i+1);
		MCmeanByEtaN.push_back( new TH1D(name,title,40,0,2) );	
	}
		
	//grab an MC ntuple
	TFile* f1 = new TFile("/local/cms/user/finkel/NoTrack/Ntuple/DE_MC2012_AlexTrgr3/DE_MC2012_AlexTrgr_newerCuts.root");	
	if(f1 == NULL)
	{
		std::cout<<"Failed to open MC file. Exiting."<<std::endl;
		return 1;
	}
	
	//make an ntuple:
	ZEffTree* zMC = new ZEffTree(*f1,false);
	//Fill the data histograms:
	double expectedPtMC;
	int ix,iy;
	const double Mz = 91.1876; //nominal Z mass
	for(int event=0; event<zMC->Entries(); event++ ) //fill the data hists
	{
		ix=zMC->reco.ix[1];
		iy=zMC->reco.iy[1];
		if( (fabs(zMC->reco.eta[1])>2.5) && (fabs(zMC->reco.eta[1])<3.0) 
			 &&(ix>29) &&(ix<71) &&(iy>29) &&(iy<71)
			 && zMC->reco.isSelected(1,"NTLooseElectronId-EtaDet") //using only events that pass selection now!
		  ) 
		{	
			if( (((ix-50)*(ix-50)+(iy-50)*(iy-50))  < 100) || (((ix-50)*(ix-50)+(iy-50)*(iy-50)) > 324) )
			{
				zMC->GetNextEvent();
				continue;
			}
			
			//"expected energy
			expectedPtMC = Mz*Mz / ( 2*zMC->reco.pt[1]*( cosh(zMC->reco.eta[1]-zMC->reco.eta[0]) - cos(zMC->reco.phi[1]-zMC->reco.phi[0]) ) );
			//NOTE: this is the energy of the entire CLUSTER, not just SEED!
			//Though most of it still comes from the seed crystal... so good enough for now.
			
			if(zMC->reco.eta[1]>0)//positive endcap
			{
				histMapMCP[std::make_pair(ix,iy)]->Fill(zMC->reco.mz);
				if( (zMC->reco.mz>75) && (zMC->reco.mz<105) )	ratioMapMCP[std::make_pair(ix,iy)]->Fill(zMC->reco.pt[1]/expectedPtMC);  //NOTE: Using Observed/Expected!
			}
			else//negative endcap
			{
				histMapMCN[std::make_pair(ix,iy)]->Fill(zMC->reco.mz);
				if( (zMC->reco.mz>70) && (zMC->reco.mz<110) )	ratioMapMCN[std::make_pair(ix,iy)]->Fill(zMC->reco.pt[1]/expectedPtMC);
			}
		}
		zMC->GetNextEvent();
	}
		
	//grab a data ntuple
	TFile* f2 = new TFile("/local/cms/user/finkel/NoTrack/Ntuple/DE_ReReco_NewerCuts/DE_ReReco2012FULL_Jan13_AlexTrgr_newerCuts_001.root");	
	if(f2 == NULL)
	{
		std::cout<<"Failed to open Data file. Exiting."<<std::endl;
		return 1;
	}
	
	//make data ntuple:
	ZEffTree* zDat = new ZEffTree(*f2,false);
	//Fill the data histograms:
	double expectedPtDat;
	for(int event=0; event<zDat->Entries(); event++ ) //fill the data hists
	{
		ix=zDat->reco.ix[1];
		iy=zDat->reco.iy[1];
		if( (fabs(zDat->reco.eta[1])>2.5) && (fabs(zDat->reco.eta[1])<3.0) 
			 &&(ix>29) &&(ix<71) &&(iy>29) &&(iy<71)
			 && zDat->reco.isSelected(1,"NTLooseElectronId-EtaDet") //using only events that pass selection now!
		  ) 
		{	
			if( (((ix-50)*(ix-50)+(iy-50)*(iy-50))  < 100) || (((ix-50)*(ix-50)+(iy-50)*(iy-50)) > 324) )
			{
				zDat->GetNextEvent();
				continue;
			}
			
			//"expected energy
			expectedPtDat = Mz*Mz / ( 2*zDat->reco.pt[1]*( cosh(zDat->reco.eta[1]-zDat->reco.eta[0]) - cos(zDat->reco.phi[1]-zDat->reco.phi[0]) ) );
			//NOTE: this is the energy of the entire CLUSTER, not just SEED!
			//Though most of it still comes from the seed crystal... so good enough for now.
			
			if(zDat->reco.eta[1]>0)//positive endcap
			{
				histMapDataP[std::make_pair(ix,iy)]->Fill(zDat->reco.mz);
				if( (zDat->reco.mz>75) && (zDat->reco.mz<105) )	ratioMapDataP[std::make_pair(ix,iy)]->Fill(zDat->reco.pt[1]/expectedPtDat);  //NOTE: Using Observed/Expected!
			} 
			else//negative endcap
			{
				histMapDataN[std::make_pair(ix,iy)]->Fill(zDat->reco.mz);
				if( (zDat->reco.mz>70) && (zDat->reco.mz<110) )	ratioMapDataN[std::make_pair(ix,iy)]->Fill(zDat->reco.pt[1]/expectedPtDat);
			}
		}
		zDat->GetNextEvent();
	}

	std::cout<<"Hists filled. Proceeding to makeing plots."<<std::endl;
	//gonna try fitting now!
	TF1 *ratioFit = new TF1("fit","gaus",0.4,1.6);
	TF1 *massFit = new TF1("fit","gaus",60,120);
